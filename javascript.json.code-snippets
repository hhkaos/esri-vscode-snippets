{
	"Find a layer by it's name": {
	  "prefix": "findLayer",
	  "body": [
		"const fl = view.map.layers.find( l => l.title === \"${1:LayerTitle}\");"
	  ],
	  "description": ""
	},
	"Load a new MapView (2D)": {
	  "prefix": "MapView",
	  "body": [
		"const view = new MapView({",
		"\tcontainer: \"${1:viewDiv}\",",
		"\tmap: ${2:map},",
		"\tzoom: ${3:4},",
		"\tcenter: [${4:15,65}]",
		"});"
	  ],
	  "description": "Create an instance of esri/views/MapView"
	},
	"Get the API from the CDN": {
	  "prefix": "getApi",
	  "body": [
		"<link rel=\"stylesheet\" href=\"https://js.arcgis.com/${1|4.20,4.19,4.18,4.17,4.16,1.15,4.14|}/esri/css/main.css\">",
		"<script src=\"https://js.arcgis.com/${2|4.20,4.19,4.18,4.17,4.16,4.15,4.14|}\"></script>"
	  ],
	  "description": "Add script and link tags for jsapi"
	},
	"Set package name and location": {
	  "prefix": "dojoConfig",
	  "body": [
		"<script>",
		"\tconst locationPath = location.pathname.replace(/\\/[^\\/]+$/,\"\");",
		"\twindow.dojoConfig = {",
		"\tpackages:[",
		"\t\t{",
		"\t\tname:\"app\",",
		"\t\tlocation: locationPath + \"/app\"",
		"\t\t}",
		"\t]",
		"\t}",
		"</script>"
	  ],
	  "description": "Sets /app folder to be able to load packages using require([\"app/your_file.js\"]);"
	},
	"(Feature|CSV|GeoJSON)Layer": {
	  "prefix": "queryLayer",
	  "body": [
		"${1:layer}  // queries all features in the layer",
		"\t.queryFeatures().then(results => {",
		"\t\t// queries features and returns a FeatureSet",
		"\t})",
		"\t.queryExtent().then(results => {",
		"\t\t// queries features returns extent of features that satisfy query",
		"\t})",
		"\t.queryFeatureCount().then(results => {",
		"\t\t// queries features and returns count of features",
		"\t})",
		"\t.queryObjectIds().then(results => {",
		"\t\t// queries features and returns objectIds array of features",
		"\t})",
		],
	  "description": "Queries all features in the layer (Feature,CSV,GeoJSON, ...)"
	},
	"(Feature|CSV|GeoJSON|Scene|Stream)LayerView": {
	  "prefix": "queryLayerView",
	  "body": [
		"${1|Feature,CSV,GeoJSON,Scene,Stream|}LayerView // queries available features in view",
		"\t.queryFeatures() // queries features and returns a FeatureSet",
		"\t.queryExtent() // queries features returns extent of features that satisfy query",
		"\t.queryFeatureCount() // queries features and returns count of features",
		"\t.queryObjectIds() // queries features and returns objectIds array of features"
	  ],
	  "description": "Queries all features in the layer view"
	},
	"Load a queryable, filterable layer": {
	  "prefix": "loadLayer (Feature|CSV|GeoJSON|...)",
	  "body": [
		"const layer = new ${1|Feature,Scene,Stream,CSV,GeoJSON|}Layer({",
		"\turl: \"${2|service url,file url|}\"",
		"});",
		"${3:view}.map.add(layer);"
	  ],
	  "description": "Server-side layers (FeatureLayer, SceneLayer and StreamLayer) and client-side layers (CSVLayer, GeoJSONLayer, and client side FeatureLayer)"
	},
	"Create FeatureLayer with client-side": {
	  "prefix": "featureLayerCS",
	  "body": [
		"const layer = new FeatureLayer({",
		"\tsource: graphics,  // array of graphics objects",
		"\tobjectIdField: \"OBJECTID\",",
		"\tfields: [{",
		"\t\tname: \"OBJECTID\",",
		"\t\ttype: \"oid\"",
		"\t}, {",
		"\t\tname: \"url\",",
		"\t\ttype: \"string\"",
		"\t}],",
		"\tpopupTemplate: {",
		"\t\tcontent: \"<img src='{url}'>\"",
		"\t},",
		"\trenderer: simpleRenderer",
		"});",
		"",
		"map.add(layer);"
	  ],
	  "description": "Using \"source\" property with a Collection of graphics"
	},
	"When layer the instance is created": {
	  "prefix": "layerWhen",
	  "body": [
		"${1|AreaMeasurement,BaseDynamic,BaseElevation,BaseTile,BuildingScene,CSV,DirectLineMeasurement,Elevation,Feature,GeoJSON,GeoRSS,Graphics,Group,Imagery,ImageryTile,IntegratedMesh,KML,MapImage,MapNotes,OGCFeature,PointCloud,Scene,Stream,SubtypeGroup,Tile,Unknown,Unsupported,VectorTile,WCS,WFS,WMS,WMTS,WebTileLayer|}Layer.when(function(){",
		"\t// This function will execute once the promise is resolved",
		"}, function(error){",
		"\t// This function will execute if the promise is rejected due to an error",
		"});"
	  ],
	  "description": "This method takes two input parameters: a callback function and an errback function. The callback executes when the instance of the class loads. The errback executes if the instance of the class fails to load."
	},
	"Load a new Graphic": {
	  "prefix": "graphic",
	  "body": [
		"let polylineGraphic = new Graphic({",
		"\tgeometry: polylineGeometry,",
		"\tsymbol: polylineSymbol,",
		"\tattributes: attributes",
		"});"
	  ],
	  "description": "Create an instance of esri/Graphic. It is a vector representation of real world geographic phenomena"
	},
	"Config ArcGIS API Key": {
	  "prefix": "esriConfig.apiKey",
	  "body": ["esriConfig.apiKey = \"${1:YOUR_API_KEY}\";"],
	  "description": "An authorization string used to access a resource or service"
	},
	"Load a new SceneView (3D)": {
	  "prefix": "SceneView",
	  "body": [
		"const view = new SceneView({",
		"\tmap: ${1:map},",
		"\tcamera: {",
		"\t\tposition: {",
		"\t\t\tx: -118.808,",
		"\t\t\ty: 33.961,",
		"\t\t\tz: 2000 // meters",
		"\t\t},",
		"\t\ttilt: 75",
		"\t},",
		"\tcontainer: \"${2:viewDiv}\"",
		"});"
	  ],
	  "description": "Create an instance of esri/views/SceneView. A SceneView displays a 3D view of a Map or WebScene instance using WebGL"
	},
	"Load a new FeatureLayer": {
		"prefix": "featureLayer",
		"body": [
		  "const fl = new FeatureLayer({",
		  "\turl: \"${1:service-url}\"",
		  "});",
		  "map.add(fl);",
		],
		"description": "Create an instance of esri/layers/FeatureLayer"
	},
	"Load a new GeoJSONLayer": {
		"prefix": "geojsonLayer",
		"body": [
		  "const geoJSONLayer = new GeoJSONLayer({",
		  "\turl: \"${1:service-url}\",",
		  "\tcopyright: \"${2:data-provider}\",",
		  "});",
		  "map.add(geoJSONLayer);",
		],
		"description": "Create an instance of esri/layers/GeoJSONLayer"
	  }
}
  